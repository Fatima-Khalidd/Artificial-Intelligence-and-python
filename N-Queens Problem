class Solution(object):
    def isSafe(self, board, row, col, n):
        # horizontal check
        for i in range(row):
            if board[i][col] == 'Q':
                return False
        # vertical check
        for j in range(col):
            if board[row][j] == 'Q':
                return False
        #lwft diagonal check
        i, j = row, col
        while i >= 0 and j >= 0:
            if board[i][j] == 'Q':
                return False
            i -= 1
            j -= 1
        # Right diagonal check
        i, j = row, col
        while i >= 0 and j < n:
            if board[i][j] == 'Q':
                return False
            i -= 1
            j += 1
        return True

    def nQueens(self, board, row, n, ans):
        if row == n:
            solution = [''.join(r) for r in board]
            ans.append(solution)
            return
        for col in range(n):
            if self.isSafe(board, row, col, n):
                board[row][col] = 'Q'
                self.nQueens(board, row + 1, n, ans)
                board[row][col] = '.'  # backtrack

    def solveNQueens(self, n):
        board = [['.' for _ in range(n)] for _ in range(n)]
        ans = []
        self.nQueens(board, 0, n, ans)
        return ans


s = Solution()
n = 4  # range 1-9
result = s.solveNQueens(n)

#  Print the result 
print(f"Total solutions for {n}-Queens: {len(result)}\n")
for idx, board in enumerate(result, 1):
    print(f"Solution {idx}:")
    for row in board:
        print(row)
    print()
